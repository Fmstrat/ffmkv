#!/usr/bin/env bash

# Some conversion notes:
# https://trac.ffmpeg.org/wiki/Encode/H.265
# 1:44 in length, shooting for 6GB file size:
# (6144 MiB * 8192 [converts MiB to kBit]) / 6240 seconds = ~8066 kBit/s total bitrate
# 8066 - 640 kBit/s (desired audio bitrate) = 7426 kBit/s video bitrate

{

TIMESTAMP=$(date "+%Y%m%d-%H%M%S.%N")

#======== Based on https://raw.githubusercontent.com/tanhauhau/Inquirer.sh/master/dist/inquirer.sh ========

# store the current set options
OLD_SET=$-
set -e

arrow="$(echo -e '\xe2\x9d\xaf')"
checked="$(echo -e '\xe2\x97\x89')"
unchecked="$(echo -e '\xe2\x97\xaf')"

black="$(tput setaf 0)"
red="$(tput setaf 1)"
green="$(tput setaf 2)"
yellow="$(tput setaf 3)"
blue="$(tput setaf 4)"
magenta="$(tput setaf 5)"
cyan="$(tput setaf 6)"
white="$(tput setaf 7)"
bold="$(tput bold)"
normal="$(tput sgr0)"
dim=$'\e[2m'

print() {
  echo "$1"
  tput el
}

join() {
  local IFS=$'\n'
  local _join_list
  eval _join_list=( '"${'${1}'[@]}"' )
  local first=true
  for item in ${_join_list[@]}; do
    if [ "$first" = true ]; then
      printf "%s" "$item"
      first=false
    else
      printf "${2-, }%s" "$item"
    fi
  done
}

function gen_env_from_options() {
  local IFS=$'\n'
  local _indices
  local _env_names
  local _checkbox_selected
  eval _indices=( '"${'${1}'[@]}"' )
  eval _env_names=( '"${'${2}'[@]}"' )

  for i in $(gen_index ${#_env_names[@]}); do
    _checkbox_selected[$i]=false
  done

  for i in ${_indices[@]}; do
    _checkbox_selected[$i]=true
  done

  for i in $(gen_index ${#_env_names[@]}); do
    printf "%s=%s\n" "${_env_names[$i]}" "${_checkbox_selected[$i]}"
  done
}

on_default() {
  true;
}

on_keypress() {
  local OLD_IFS
  local IFS
  local key
  OLD_IFS=$IFS
  local on_up=${1:-on_default}
  local on_down=${2:-on_default}
  local on_space=${3:-on_default}
  local on_enter=${4:-on_default}
  local on_left=${5:-on_default}
  local on_right=${6:-on_default}
  local on_ascii=${7:-on_default}
  local on_backspace=${8:-on_default}
  _break_keypress=false
  while IFS="" read -rsn1 key; do
      case "$key" in
      $'\x1b')
          read -rsn1 key
          if [[ "$key" == "[" ]]; then
              read -rsn1 key
              case "$key" in
              'A') eval $on_up;;
              'B') eval $on_down;;
              'D') eval $on_left;;
              'C') eval $on_right;;
              esac
          fi
          ;;
      ' ') eval $on_space ' ';;
      [a-z0-9A-Z\!\#\$\&\+\,\-\.\/\;\=\?\@\[\]\^\_\{\}\~]) eval $on_ascii $key;;
      $'\x7f') eval $on_backspace $key;;
      '') eval $on_enter $key;;
      esac
      if [ $_break_keypress = true ]; then
        break
      fi
  done
  IFS=$OLD_IFS
}

gen_index() {
  local k=$1
  local l=0
  if [ $k -gt 0 ]; then
    for l in $(seq $k)
    do
       echo "$l-1" | bc
    done
  fi
}

cleanup() {
  # Reset character attributes, make cursor visible, and restore
  # previous screen contents (if possible).
  tput sgr0
  tput cnorm
  stty echo

  # Restore `set e` option to its orignal value
  if [[ $OLD_SET =~ e ]]
  then set -e
  else set +e
  fi
}

control_c() {
  cleanup
  exit $?
}

select_indices() {
  local _select_list
  local _select_indices
  local _select_selected=()
  eval _select_list=( '"${'${1}'[@]}"' )
  eval _select_indices=( '"${'${2}'[@]}"' )
  local _select_var_name=$3
  eval $_select_var_name\=\(\)
  for i in $(gen_index ${#_select_indices[@]}); do
    eval $_select_var_name\+\=\(\""${_select_list[${_select_indices[$i]}]}"\"\)
  done
}




on_checkbox_input_up() {
  remove_checkbox_instructions
  tput cub "$(tput cols)"

  if [ "${_checkbox_selected[$_current_index]}" = true ]; then
    printf " ${green}${checked}${normal} ${_checkbox_list[$_current_index]} ${normal}"
  else
    printf " ${unchecked} ${_checkbox_list[$_current_index]} ${normal}"
  fi
  tput el

  if [ $_current_index = 0 ]; then
    _current_index=$((${#_checkbox_list[@]}-1))
    tput cud $((${#_checkbox_list[@]}-1))
    tput cub "$(tput cols)"
  else
    _current_index=$((_current_index-1))

    tput cuu1
    tput cub "$(tput cols)"
    tput el
  fi

  if [ "${_checkbox_selected[$_current_index]}" = true ]; then
    printf "${cyan}${arrow}${green}${checked}${normal} ${_checkbox_list[$_current_index]} ${normal}"
  else
    printf "${cyan}${arrow}${normal}${unchecked} ${_checkbox_list[$_current_index]} ${normal}"
  fi
}

on_checkbox_input_down() {
  remove_checkbox_instructions
  tput cub "$(tput cols)"

  if [ "${_checkbox_selected[$_current_index]}" = true ]; then
    printf " ${green}${checked}${normal} ${_checkbox_list[$_current_index]} ${normal}"
  else
    printf " ${unchecked} ${_checkbox_list[$_current_index]} ${normal}"
  fi

  tput el

  if [ $_current_index = $((${#_checkbox_list[@]}-1)) ]; then
    _current_index=0
    tput cuu $((${#_checkbox_list[@]}-1))
    tput cub "$(tput cols)"
  else
    _current_index=$((_current_index+1))
    tput cud1
    tput cub "$(tput cols)"
    tput el
  fi

  if [ "${_checkbox_selected[$_current_index]}" = true ]; then
    printf "${cyan}${arrow}${green}${checked}${normal} ${_checkbox_list[$_current_index]} ${normal}"
  else
    printf "${cyan}${arrow}${normal}${unchecked} ${_checkbox_list[$_current_index]} ${normal}"
  fi
}

on_checkbox_input_enter() {
  local OLD_IFS
  OLD_IFS=$IFS
  _checkbox_selected_indices=()
  _checkbox_selected_options=()
  IFS=$'\n'

  for i in $(gen_index ${#_checkbox_list[@]}); do
    if [ "${_checkbox_selected[$i]}" = true ]; then
      _checkbox_selected_indices+=($i)
      _checkbox_selected_options+=("${_checkbox_list[$i]}")
    fi
  done

  tput cud $((${#_checkbox_list[@]}-${_current_index}))
  tput cub "$(tput cols)"

  for i in $(seq $((${#_checkbox_list[@]}+1))); do
    tput el1
    tput el
    tput cuu1
  done
  tput cub "$(tput cols)"

  tput cuf $((${#prompt}+3))
  printf "${cyan}$(join _checkbox_selected_options)${normal}"
  tput el

  tput cud1
  tput cub "$(tput cols)"
  tput el

  _break_keypress=true
  IFS=$OLD_IFS
}

on_checkbox_input_space() {
  remove_checkbox_instructions
  tput cub "$(tput cols)"
  tput el
  if [ "${_checkbox_selected[$_current_index]}" = true ]; then
    _checkbox_selected[$_current_index]=false
  else
    _checkbox_selected[$_current_index]=true
  fi

  if [ "${_checkbox_selected[$_current_index]}" = true ]; then
    printf "${cyan}${arrow}${green}${checked}${normal} ${_checkbox_list[$_current_index]} ${normal}"
  else
    printf "${cyan}${arrow}${normal}${unchecked} ${_checkbox_list[$_current_index]} ${normal}"
  fi
}

remove_checkbox_instructions() {
  if [ $_first_keystroke = true ]; then
    tput cuu $((${_current_index}+1))
    tput cub "$(tput cols)"
    tput cuf $((${#prompt}+3))
    tput el
    tput cud $((${_current_index}+1))
    _first_keystroke=false
  fi
}

# for vim movements
on_checkbox_input_ascii() {
  local key=$1
  case $key in
    "j" ) on_checkbox_input_down;;
    "k" ) on_checkbox_input_up;;
  esac
}

_checkbox_input() {
  local i
  local j
  prompt=$1
  eval _checkbox_list=( '"${'${2}'[@]}"' )
  _current_index=0
  _first_keystroke=true

  trap control_c SIGINT EXIT

  stty -echo
  tput civis

  print "${normal}${green}?${normal} ${bold}${prompt}${normal} ${dim}(Press <space> to select, <enter> to finalize)${normal}"

  for i in $(gen_index ${#_checkbox_list[@]}); do
    _checkbox_selected[$i]=false
  done

  if [ -n "$3" ]; then
    eval _selected_indices=( '"${'${3}'[@]}"' )
    for i in ${_selected_indices[@]}; do
      _checkbox_selected[$i]=true
    done
  fi

  for i in $(gen_index ${#_checkbox_list[@]}); do
    tput cub "$(tput cols)"
    if [ $i = 0 ]; then
      if [ "${_checkbox_selected[$i]}" = true ]; then
        print "${cyan}${arrow}${green}${checked}${normal} ${_checkbox_list[$i]} ${normal}"
      else
        print "${cyan}${arrow}${normal}${unchecked} ${_checkbox_list[$i]} ${normal}"
      fi
    else
      if [ "${_checkbox_selected[$i]}" = true ]; then
        print " ${green}${checked}${normal} ${_checkbox_list[$i]} ${normal}"
      else
        print " ${unchecked} ${_checkbox_list[$i]} ${normal}"
      fi
    fi
    tput el
  done

  for j in $(gen_index ${#_checkbox_list[@]}); do
    tput cuu1
  done

  on_keypress on_checkbox_input_up on_checkbox_input_down on_checkbox_input_space on_checkbox_input_enter on_default on_default on_checkbox_input_ascii
}

checkbox_input() {
  _checkbox_input "$1" "$2"
  _checkbox_input_output_var_name=$3
  select_indices _checkbox_list _checkbox_selected_indices $_checkbox_input_output_var_name

  unset _checkbox_list
  unset _break_keypress
  unset _first_keystroke
  unset _current_index
  unset _checkbox_input_output_var_name
  unset _checkbox_selected_indices
  unset _checkbox_selected_options

  cleanup
}

checkbox_input_indices() {
  _checkbox_input "$1" "$2" "$3"
  _checkbox_input_output_var_name=$3

  eval $_checkbox_input_output_var_name\=\(\)
  for i in $(gen_index ${#_checkbox_selected_indices[@]}); do
    eval $_checkbox_input_output_var_name\+\=\(${_checkbox_selected_indices[$i]}\)
  done

  unset _checkbox_list
  unset _break_keypress
  unset _first_keystroke
  unset _current_index
  unset _checkbox_input_output_var_name
  unset _checkbox_selected_indices
  unset _checkbox_selected_options

  cleanup
}




on_list_input_up() {
  remove_list_instructions
  tput cub "$(tput cols)"

  printf "  ${_list_options[$_list_selected_index]}"
  tput el

  if [ $_list_selected_index = 0 ]; then
    _list_selected_index=$((${#_list_options[@]}-1))
    tput cud $((${#_list_options[@]}-1))
    tput cub "$(tput cols)"
  else
    _list_selected_index=$((_list_selected_index-1))

    tput cuu1
    tput cub "$(tput cols)"
    tput el
  fi

  printf "${cyan}${arrow} %s ${normal}" "${_list_options[$_list_selected_index]}"
}

on_list_input_down() {
  remove_list_instructions
  tput cub "$(tput cols)"

  printf "  ${_list_options[$_list_selected_index]}"
  tput el

  if [ $_list_selected_index = $((${#_list_options[@]}-1)) ]; then
    _list_selected_index=0
    tput cuu $((${#_list_options[@]}-1))
    tput cub "$(tput cols)"
  else
    _list_selected_index=$((_list_selected_index+1))
    tput cud1
    tput cub "$(tput cols)"
    tput el
  fi
  printf "${cyan}${arrow} %s ${normal}" "${_list_options[$_list_selected_index]}"
}

on_list_input_enter_space() {
  local OLD_IFS
  OLD_IFS=$IFS
  IFS=$'\n'

  tput cud $((${#_list_options[@]}-${_list_selected_index}))
  tput cub "$(tput cols)"

  for i in $(seq $((${#_list_options[@]}+1))); do
    tput el1
    tput el
    tput cuu1
  done
  tput cub "$(tput cols)"

  tput cuf $((${#prompt}+3))
  printf "${cyan}${_list_options[$_list_selected_index]}${normal}"
  tput el

  tput cud1
  tput cub "$(tput cols)"
  tput el

  _break_keypress=true
  IFS=$OLD_IFS
}

remove_list_instructions() {
  if [ $_first_keystroke = true ]; then
    tput cuu $((${_list_selected_index}+1))
    tput cub "$(tput cols)"
    tput cuf $((${#prompt}+3))
    tput el
    tput cud $((${_list_selected_index}+1))
    _first_keystroke=false
  fi
}

_list_input() {
  local i
  local j
  prompt=$1
  eval _list_options=( '"${'${2}'[@]}"' )

  _list_selected_index=0
  _first_keystroke=true

  trap control_c SIGINT EXIT

  stty -echo
  tput civis

  print "${normal}${green}?${normal} ${bold}${prompt}${normal} ${dim}(Use arrow keys)${normal}"

  for i in $(gen_index ${#_list_options[@]}); do
    tput cub "$(tput cols)"
    if [ $i = 0 ]; then
      print "${cyan}${arrow} ${_list_options[$i]} ${normal}"
    else
      print "  ${_list_options[$i]}"
    fi
    tput el
  done

  for j in $(gen_index ${#_list_options[@]}); do
    tput cuu1
  done

  on_keypress on_list_input_up on_list_input_down on_list_input_enter_space on_list_input_enter_space

}


list_input() {
  _list_input "$1" "$2"
  local var_name=$3
  eval $var_name=\'"${_list_options[$_list_selected_index]}"\'
  unset _list_selected_index
  unset _list_options
  unset _break_keypress
  unset _first_keystroke

  cleanup
}

list_input_index() {
  _list_input "$1" "$2"
  local var_name=$3
  eval $var_name=\'"$_list_selected_index"\'
  unset _list_selected_index
  unset _list_options
  unset _break_keypress
  unset _first_keystroke

  cleanup
}




on_text_input_left() {
  remove_regex_failed
  if [ $_current_pos -gt 0 ]; then
    tput cub1
    _current_pos=$(($_current_pos-1))
  fi
}

on_text_input_right() {
  remove_regex_failed
  if [ $_current_pos -lt ${#_text_input} ]; then
    tput cuf1
    _current_pos=$(($_current_pos+1))
  fi
}

on_text_input_enter() {
  remove_regex_failed

  if [[ "$_text_input" =~ $_text_input_regex && "$(eval $_text_input_validator "$_text_input")" = true ]]; then
    tput cub "$(tput cols)"
    tput cuf $((${#_read_prompt}-19))
    printf "${cyan}${_text_input}${normal}"
    tput el
    tput cud1
    tput cub "$(tput cols)"
    tput el
    eval $var_name=\'"${_text_input}"\'
    _break_keypress=true
  else
    _text_input_regex_failed=true
    tput civis
    tput cud1
    tput cub "$(tput cols)"
    tput el
    printf "${red}>>${normal} $_text_input_regex_failed_msg"
    tput cuu1
    tput cub "$(tput cols)"
    tput cuf $((${#_read_prompt}-19))
    tput el
    _text_input=""
    _current_pos=0
    tput cnorm
  fi
}

on_text_input_ascii() {
  remove_regex_failed
  local c=$1

  if [ "$c" = '' ]; then
    c=' '
  fi

  local rest="${_text_input:$_current_pos}"
  _text_input="${_text_input:0:$_current_pos}$c$rest"
  _current_pos=$(($_current_pos+1))

  tput civis
  printf "$c$rest"
  tput el
  if [ ${#rest} -gt 0 ]; then
    tput cub ${#rest}
  fi
  tput cnorm
}

on_text_input_backspace() {
  remove_regex_failed
  if [ $_current_pos -gt 0 ]; then
    local start="${_text_input:0:$(($_current_pos-1))}"
    local rest="${_text_input:$_current_pos}"
    _current_pos=$(($_current_pos-1))
    tput cub 1
    tput el
    tput sc
    printf "$rest"
    tput rc
    _text_input="$start$rest"
  fi
}

remove_regex_failed() {
  if [ $_text_input_regex_failed = true ]; then
    _text_input_regex_failed=false
    tput sc
    tput cud1
    tput el1
    tput el
    tput rc
  fi
}

text_input_default_validator() {
  echo true;
}

text_input() {
  local prompt=$1
  local var_name=$2
  local _text_input_regex="${3:-"\.+"}"
  local _text_input_regex_failed_msg=${4:-"Input validation failed"}
  local _text_input_validator=${5:-text_input_default_validator}
  local _read_prompt_start=$'\e[32m?\e[39m\e[1m'
  local _read_prompt_end=$'\e[22m'
  local _read_prompt="$( echo "$_read_prompt_start ${prompt} $_read_prompt_end")"
  local _current_pos=0
  local _text_input_regex_failed=false
  local _text_input=""
  printf "$_read_prompt"


  trap control_c SIGINT EXIT

  stty -echo
  tput cnorm

  on_keypress on_default on_default on_text_input_ascii on_text_input_enter on_text_input_left on_text_input_right on_text_input_ascii on_text_input_backspace
  eval $var_name=\'"${_text_input}"\'

  cleanup
}

# === Originally based on https://gist.githubusercontent.com/pruperting/397509/raw/7f9e2335189a3baa0255cd562853d382f3624201/ffmpeg-progress.sh

progress() {
	sleep 10
	LASTLINE=$(cat -v /tmp/ffmkv/${TIMESTAMP}/ffmpeg_${1}.log | tr '^M' '\n' | grep frame= | tail -n 1)
	CFRAME=${LASTLINE##*frame=}
	CFRAME=$(echo $CFRAME)
	CFRAME=${CFRAME%% *}
	CPERCENT=$(round 100*${CFRAME}/${FRAMES} 0)
	CFPS=${LASTLINE##*fps=}
	CFPS=$(echo $CFPS)
	CFPS=${CFPS%% *}
	TOTAL=$(round ${FRAMES}+${CFRAME}+${CPERCENT}+${CFPS} 0)
	# Check to make sure all are numbers
	if [ $TOTAL -eq $TOTAL 2> /dev/null ]; then
		if [ "$CFPS" = "0" ]; then
			echo -ne "\rffmpeg: $CFRAME of $FRAMES frames at $CFPS fps, progress: $CPERCENT"%" and ETA: error                "
		else
			REMAINING=$(( FRAMES - CFRAME ))
			SECONDS=$(round ${REMAINING}/${CFPS} 0)
			H=$(round ${SECONDS}/3600 0)
			M=$(round ${SECONDS}/60 0)
			M=$(( M % 60 ))
			S=$(( SECONDS % 60 ))
			echo -ne "\rffmpeg: $CFRAME of $FRAMES frames at $CFPS fps, progress: $CPERCENT"%" and ETA: "$H"h "$M"m "$S"s     "
		fi
	else
		echo "Error, one of the values wasn't a number, trying again in 10s..."
	fi
}

function convertFile() {
	echo ffmpeg conversion of "$1" started on `date "+%m/%d/%y %l:%M:%S %p"`
	echo ""$1" has $FRAMES frames, now converting"
	trans "$1" "$2" &>> /tmp/ffmkv/${TIMESTAMP}/ffmpeg_${3}.log &
	PID=$!
	CFRAME=1
	while [ -e /proc/$PID ]; do
		progress $3
	done
	echo ""
	echo ffmpeg stopped on `date "+%m/%d/%y %l:%M:%S %p"`
}


# =============================================================

function menuFromCmd() {
	local mLOCALRESULT=$1
	local mRESULT=''
	read -r -a ARRAY <<< $3
	list_input "$2" ARRAY mRESULT
	eval $mLOCALRESULT="'$mRESULT'"
}

function menuFromArr() {
	local mLOCALRESULT=$1
	shift
	local PROMPT=$1
	shift
	local ARRAY=("$@")
	list_input "$PROMPT" ARRAY mRESULT
	eval $mLOCALRESULT="'$mRESULT'"
}

# =============================================================

mkdir -p ~/.ffmkv/presets

function mkPreset() {
  echo "
# The video stream
VIDEO=${1}

# The audio stream
AUDIO=${2}

# How to handle the video conversion
VIDEOFORMAT='${3}'

# How to handle the audio conversion
AUDIOBITRATE='${4}'

# Type of Full or Sample
TYPE=${5}

# If sample, the sample length in seconds
SAMPLELENGTH=${6}

# How to handle subtitles
SUB=${7}

# The video resolution by width. This will scale the video down to
# the specified resolution width, keeping the aspect ration. It will
# not scale the video up.
# Can be one of: existing, 3840, 1920, 1280
MAXWIDTH=${8}

# How to target the file size
CONVERTTYPE='${9}'

# How big should the target be in GB
GBSIZE=${10}

# How to handle HDR if it exists in the source
COLORTYPE='${11}'

# How many threads would you like to use? (Auto = 0)
THREADS=${12}
" > "${13}"
}

mkPreset \
  "0:0" \
  "0:1" \
  "Transcode to x265 with a 1-pass constant bitrate" \
  "192" \
  "Full" \
  "15" \
  "Yes" \
  "1920" \
  "Target by gigs per hour of video" \
  "1" \
  "Convert to SDR color" \
  "0" \
  "${HOME}/.ffmkv/presets/Up to 1080p, 192k audio, 1GB per hour CBR, SDR"

mkPreset \
  "0:0" \
  "0:1" \
  "Transcode to x265 with a 2-pass variable bitrate" \
  "Stream copy" \
  "Full" \
  "15" \
  "Yes" \
  "1920" \
  "Target by gigs per hour of video" \
  "2" \
  "Preserve HDR color" \
  "0" \
  "${HOME}/.ffmkv/presets/Up to 1080p, original audio, 2GB per hour VBR, HDR"

mkPreset \
  "0:0" \
  "0:1" \
  "Transcode to x265 with a 2-pass variable bitrate" \
  "Stream copy" \
  "Full" \
  "15" \
  "Yes" \
  "3840" \
  "Target by gigs per hour of video" \
  "4" \
  "Preserve HDR color" \
  "0" \
  "${HOME}/.ffmkv/presets/Up to 4K, original audio, 4GB per hour VBR, HDR"

function usage() {
	echo "Usage: ffmkv [--preset '<preset>'] <input> <ouput>"
  echo "Examples:"
  echo "  ffmkv input.mkv output.mkv"
  echo "  ffmkv --preset 'Up to 4K, original audio, 4GB per hour VBR, HDR' input.mkv output.mkv"
	exit 1
}

if [ -z "$(which ffmpeg)" ]; then
  echo "ffmpeg is required, exiting."
  exit 1
fi
if [ -z "$(which ffprobe)" ]; then
  echo "ffprobe is required, exiting."
  exit 1
fi
if [ -z "$(ffmpeg -filters 2> /dev/null |grep zscale)" ]; then
  echo "Your ffmpeg does not support zscale, please update from https://ffmpeg.org if you need to use HDR to SDR conversion or resolution changes."
fi

if [ "$#" != "2" ] && [ "$#" != "4" ]; then
  usage
fi

if [ "$1" = "--preset" ]; then
  PRESET="$2"
  shift
  shift
  if [ "$#" != "2" ]; then
    usage
  fi
fi

round() {
	echo $(printf %.$2f $(echo "scale=$2;(((10^$2)*$1)+0.5)/(10^$2)" | bc))
}

if [ -z "${PRESET}" ]; then
  USEPRESETS=(Yes No)
  menuFromArr USEPRESET "Use a preset?" "${USEPRESETS[@]}"
  if [ "${USEPRESET}" = "Yes" ]; then
    cd ~/.ffmkv/presets
    PRESETS=(*)
    cd -
    menuFromArr PRESET "Which preset?" "${PRESETS[@]}"
  fi
fi
if [ -n "${PRESET}" ]; then
    . "${HOME}/.ffmkv/presets/${PRESET}"
fi

if [ -z "${VIDEO}" ]; then
  IFS=$'\r\n' GLOBIGNORE='*' command eval  'VIDEOS=($(ffmpeg -i "$1" 2>&1 |grep Stream |grep Video |sed "s/^[ \t]*//"))'
  menuFromArr VIDEO "Which video stream?" "${VIDEOS[@]}"
  VIDEO=${VIDEO##*#}
  VIDEO=${VIDEO%%\: *}
  VIDEO=${VIDEO%%(*}
fi

CURVIDEOBITRATE=$(ffprobe -show_streams -select_streams ${VIDEO#*:} "${1}" 2> /dev/null |grep "^bit_rate=")
CURVIDEOBITRATE=${CURVIDEOBITRATE##*=}
if [ "${CURVIDEOBITRATE}" != "N\/A" ]; then
	CURVIDEOBITRATE=${CURVIDEOBITRATE::-3}
	if [ -n "${CURVIDEOBITRATE}" ]; then
		SC="Stream copy (${CURVIDEOBITRATE}kbps)"
	else
		SC="Stream copy (VBR)"
	fi
else
	SC="Stream copy (VBR)"
	CURVIDEOBITRATE=""
fi

if [ -z "${VIDEOFORMAT}" ]; then
  VIDEOFORMATS=("Transcode to x265 with a 2-pass variable bitrate" \
                "Transcode to x265 with a 1-pass constant bitrate" \
                "Transcode to x264 with a 2-pass variable bitrate" \
                "Transcode to x264 with a 1-pass constant bitrate" \
                "${SC}")
  menuFromArr VIDEOFORMAT "How would you like to handle video conversion?" "${VIDEOFORMATS[@]}"
fi

if [ -z "${AUDIO}" ]; then
  IFS=$'\r\n' GLOBIGNORE='*' command eval  'AUDIOS=($(ffmpeg -i "$1" 2>&1 |grep Stream |grep Audio |sed "s/^[ \t]*//"))'
  menuFromArr AUDIO "Which audio stream?" "${AUDIOS[@]}"
  AUDIO=${AUDIO##*#}
  AUDIO=${AUDIO%%\: *}
  AUDIO=${AUDIO%%(*}
fi

CHANNELLAYOUT=$(ffprobe -show_streams -select_streams ${AUDIO#*:} "${1}" 2> /dev/null |grep "^channel_layout=")
if [ "$CHANNELLAYOUT" != "unknown" ]; then
  CHANNELLAYOUT=${CHANNELLAYOUT##*=}
  CHANNELLAYOUT=${CHANNELLAYOUT%%(*}
fi

CURAUDIOBITRATE=$(ffprobe -show_streams -select_streams ${AUDIO#*:} "${1}" 2> /dev/null |grep "^bit_rate=")
CURAUDIOBITRATE=${CURAUDIOBITRATE##*=}
if [ "${CURAUDIOBITRATE}" != "N\/A" ]; then
	CURAUDIOBITRATE=${CURAUDIOBITRATE::-3}
	if [ -n "${CURAUDIOBITRATE}" ]; then
		SC="Stream copy (${CURAUDIOBITRATE}kbps)"
	else
		SC="Stream copy (VBR)"
	fi
else
	SC="Stream copy (VBR)"
	CURAUDIOBITRATE=""
fi

if [ -z "${AUDIOBITRATE}" ]; then
  AUDIOBITRATES=("128 (kbps ${CHANNELLAYOUT} channel)" "160 (kbps ${CHANNELLAYOUT} channel)" "192 (kbps ${CHANNELLAYOUT} channel)" "384 (kbps ${CHANNELLAYOUT} channel)" "${SC}")
  menuFromArr AUDIOBITRATE "How would you like to handle audio conversion?" "${AUDIOBITRATES[@]}"
  AUDIOBITRATE=${AUDIOBITRATE%% (*}
fi

if [ "Stream copy" = "${AUDIOBITRATE}" ]; then
	AUDIOCMD="-c:a copy"
else
  if [ "$CHANNELLAYOUT" != "unknown" ]; then
	  AUDIOCMD="-c:a aac -b:a ${AUDIOBITRATE}k -af 'channelmap=channel_layout=${CHANNELLAYOUT}'"
  else
	  AUDIOCMD="-c:a aac -b:a ${AUDIOBITRATE}k"
  fi
fi

SECONDS=$(ffmpeg -i "$1" 2>&1 |grep Duration | cut -d ' ' -f 4 | sed s/,// | sed 's@\..*@@g' | awk '{ split($1, A, ":"); split(A[3], B, "."); print 3600*A[1] + 60*A[2] + B[1] }')
FPS=( $(ffmpeg -i "$1" 2>&1 | sed -n "s/.*, \(.*\) tbr.*/\1/p") )
FRAMES=$(round $SECONDS*$FPS 0)

if [ -z "${TYPE}" ]; then
  TYPES=(Sample Full)
  menuFromArr TYPE "Make a sample or process the full file?" "${TYPES[@]}"
fi
if [ "${TYPE}" = "Sample" ]; then
	SAMPLELENGTHS=(15 30 60 90 120)
  if [ -z "${SAMPLELENGTH}" ]; then
  	SAMPLELENGTHS=(15 30 60 90 120)
	  menuFromArr SAMPLELENGTH "What sample length (in seconds)?" "${SAMPLELENGTHS[@]}"
  fi
	FRAMES=$(round ${FPS}*${SAMPLELENGTH} 0)
	START="-ss 00:10:00"
	LENGTH="-t ${SAMPLELENGTH}"
fi

if [ -z "${SUB}" ]; then
  SUBS=(Yes No)
  menuFromArr SUB "Copy subtitles if they exist?" "${SUBS[@]}"
fi
if [ "$SUB" = "Yes" ]; then
	SUB="-map 0:s? -c:s copy"
else
	SUB=""
fi

rm -rf /tmp/ffmkv/${TIMESTAMP}
mkdir -p /tmp/ffmkv/${TIMESTAMP}

if [[ "${VIDEOFORMAT}" == "Transcode"* ]]; then
	WIDTH=$(ffprobe -show_streams -select_streams ${VIDEO#*:} "${1}" 2> /dev/null |grep "^width=")
	WIDTH=${WIDTH##*=}
	HEIGHT=$(ffprobe -show_streams -select_streams ${VIDEO#*:} "${1}" 2> /dev/null |grep "^height=")
	HEIGHT=${HEIGHT##*=}
	ASPECT=$(ffprobe -show_streams -select_streams ${VIDEO#*:} "${1}" 2> /dev/null |grep "^display_aspect_ratio=")
	ASPECT=${ASPECT##*=}
	ASPECTWIDTH=${ASPECT%:*}
	ASPECTHEIGHT=${ASPECT#*:}
  if [ -z "${MAXWIDTH}" ]; then
    RESOLUTIONS=()
    if (( WIDTH >= 7680 )); then
      NEWHEIGHT=$(round 7680/${ASPECTWIDTH}*${ASPECTHEIGHT} 0)
      RESOLUTIONS+=("7680x${NEWHEIGHT}")
      if [ "${WIDTH}" = 7680 ] && [ "${HEIGHT}" = "${NEWHEIGHT}" ]; then
        FOUNDRES=true
      fi
    fi
    if (( WIDTH >= 3840 )); then
      NEWHEIGHT=$(round 3840/${ASPECTWIDTH}*${ASPECTHEIGHT} 0)
      RESOLUTIONS+=("3840x${NEWHEIGHT}")
      if [ "${WIDTH}" = 3840 ] && [ "${HEIGHT}" = "${NEWHEIGHT}" ]; then
        FOUNDRES=true
      fi
    fi
    if (( WIDTH >= 2560 )); then
      NEWHEIGHT=$(round 2560/${ASPECTWIDTH}*${ASPECTHEIGHT} 0)
      RESOLUTIONS+=("2560x${NEWHEIGHT}")
      if [ "${WIDTH}" = 2560 ] && [ "${HEIGHT}" = "${NEWHEIGHT}" ]; then
        FOUNDRES=true
      fi
    fi
    if (( WIDTH >= 1920 )); then
      NEWHEIGHT=$(round 1920/${ASPECTWIDTH}*${ASPECTHEIGHT} 0)
      RESOLUTIONS+=("1920x${NEWHEIGHT}")
      if [ "${WIDTH}" = 1920 ] && [ "${HEIGHT}" = "${NEWHEIGHT}" ]; then
        FOUNDRES=true
      fi
    fi
    if (( WIDTH >= 1280 )); then
      NEWHEIGHT=$(round 1280/${ASPECTWIDTH}*${ASPECTHEIGHT} 0)
      RESOLUTIONS+=("1280x${NEWHEIGHT}")
      if [ "${WIDTH}" = 1280 ] && [ "${HEIGHT}" = "${NEWHEIGHT}" ]; then
        FOUNDRES=true
      fi
    fi
    RESOLUTIONS+=("${WIDTH}x${HEIGHT} (Original)")
    menuFromArr RESOLUTION "What resolution?" "${RESOLUTIONS[@]}"
    RESOLUTION=${RESOLUTION%% (*}
    NEWWIDTH=${RESOLUTION%x*}
    NEWHEIGHT=${RESOLUTION#*x}
  else
    if (( WIDTH <= MAXWIDTH )); then
      NEWWIDTH=${WIDTH}
      NEWHEIGHT=${HEIGHT}
    else
      NEWWIDTH=${MAXWIDTH}
      NEWHEIGHT=$(round ${MAXWIDTH}/${ASPECTWIDTH}*${ASPECTHEIGHT} 0)
    fi
  fi
  if [ "${WIDTH}" != "${NEWWIDTH}" ] || [ "${HEIGHT}" != "${NEWHEIGHT}" ]; then
    #SCALE="scale=${NEWWIDTH}:${NEWHEIGHT}"
    SCALE="zscale=w=${NEWWIDTH}:h=${NEWHEIGHT}"
  fi

  if [ -z "${PRESET}" ]; then
    FPSS=("${FPS} (Original)" "30" "60")
    menuFromArr NEWFPS "What FPS?" "${FPSS[@]}"
    if [[ "${NEWFPS}" != *"Original"* ]]; then
      FPSCMD="-filter:v fps=fps=${NEWFPS}"
    fi
  fi

  if [ -z "${CONVERTTYPE}" ]; then
	  CONVERTTYPES=("Target a total file size" "Target by gigs per hour of video")
	  menuFromArr CONVERTTYPE "How would you like to convert?" "${CONVERTTYPES[@]}"
  fi

  if [ -z "${GBSIZE}" ]; then
    if [ "${CONVERTTYPE}" = "Target a total file size" ]; then
      GBSIZES=(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)
      menuFromArr GBSIZE "How many GB for final size?" "${GBSIZES[@]}"
    else
      GBSIZES=(1 2 3 4 5 6 7 8)
      menuFromArr GBSIZE "How many GB per hour of video?" "${GBSIZES[@]}"
	  fi
  fi

	if [ "${CONVERTTYPE}" = "Target a total file size" ]; then
		MEGSIZE=$(( $GBSIZE * 1024 ))
	else
		HOURS=$(echo "scale=9; $SECONDS / 60 / 60" | bc)
		GBSIZE=$(echo "scale=9; $GBSIZE * $HOURS" | bc)
		MEGSIZE=$(round $GBSIZE*1024 0)
	fi

	BITRATE=$(( $MEGSIZE * 8192 / $SECONDS ))
	if [ "Stream copy" = "${AUDIOBITRATE}" ]; then
		if [ -n "${CURAUDIOBITRATE}" ]; then
			BITRATE=$(( $BITRATE - $CURAUDIOBITRATE ))
		else
			echo "Audio is Stream Copy VBR, filesize will be greater than estimated."
		fi
	else
		BITRATE=$(( $BITRATE - $AUDIOBITRATE ))
	fi

	COLORSPACE=$(ffprobe -show_streams -select_streams ${VIDEO#*:} "${1}" 2> /dev/null |grep "^color_space=")
	COLORSPACE=${COLORSPACE##*=}
	COLORTRANSFER=$(ffprobe -show_streams -select_streams ${VIDEO#*:} "${1}" 2> /dev/null |grep "^color_transfer=")
	COLORTRANSFER=${COLORTRANSFER##*=}
	COLORPRIMARIES=$(ffprobe -show_streams -select_streams ${VIDEO#*:} "${1}" 2> /dev/null |grep "^color_primaries=")
	COLORPRIMARIES=${COLORPRIMARIES##*=}

	# Handle HDR
	PARAMS=""
	if [ "${COLORSPACE}" = "bt2020nc" ] && [ "${COLORTRANSFER}" = "smpte2084" ] && [ "${COLORPRIMARIES}" = "bt2020" ]; then
    if [ -z "${COLORTYPE}" ]; then
		  COLORTYPES=("Preserve HDR color" "Convert to SDR color")
		  menuFromArr COLORTYPE "This is an HDR video, how would you like to handle color?" "${COLORTYPES[@]}"
    fi
		if [ "${COLORTYPE}" = "Preserve HDR color" ]; then
			PARAMS="colorprim=bt2020:transfer=smpte2084:colormatrix=bt2020nc"
		else
			SDR="zscale=transfer=linear,tonemap=tonemap=clip:param=1.0:desat=2:peak=0,zscale=transfer=bt709,format=yuv420p"
		fi
	fi

  if [ -n "${SDR}" ] && [ -n "${SCALE}" ]; then
    VIDEOFILTERS="-vf '${SCALE},${SDR}'"
  elif [ -n "${SCALE}" ]; then
    VIDEOFILTERS="-vf '${SCALE}'"
  elif [ -n "${SDR}" ]; then
    VIDEOFILTERS="-vf '${SDR}'"
  fi
  
  if [ -z "${THREADS}" ]; then
    TOTALTHREADS=$(grep -c ^processor /proc/cpuinfo)
    HTHREADS=( "Auto: $TOTALTHREADS Threads" \
    "75%: $(( $TOTALTHREADS / 4 * 3 )) Threads" \
    "50%: $(( $TOTALTHREADS / 2 )) Threads" \
    "33%: $(( $TOTALTHREADS / 3 )) Threads" \
    "25%: $(( $TOTALTHREADS / 4 )) Threads" )
    menuFromArr NEWTHREADS "How Many Threads? Recommend no less than 4 threads" "${HTHREADS[@]}"
    if [[ "${NEWTHREADS}" != *"Auto"* ]]; then
      NEWTHREADS=${NEWTHREADS:5}		#remove first 5 characters
      NEWTHREADS=${NEWTHREADS%" Threads"}	#remove " Threads from end
      THREADSCMD="-threads ${NEWTHREADS}"
      echo $THREADSCMD
    else
      THREADSCMD="-threads 0"
    fi
  else
    THREADSCMD="-threads ${THREADS}"
  fi

	if [[ "${VIDEOFORMAT}" == *"x265"* ]]; then
		VFORMAT=265
        else
		VFORMAT=264
	fi
	if [[ "${VIDEOFORMAT}" == *"variable bitrate" ]]; then
		if [ -n "${PARAMS}" ]; then
			PARAMS=":${PARAMS}"
		fi
		trans() {
			echo ffmpeg ${START} -y -vsync 0 ${THREADSCMD} -i "$1" ${LENGTH} -map ${VIDEO} -map ${AUDIO} -c:v libx${VFORMAT} -b:v ${BITRATE}k ${FPSCMD} -x${VFORMAT}-params "pass=1${PARAMS}" ${VIDEOFILTERS} -max_muxing_queue_size 9999 -an -f matroska /dev/null
			eval ffmpeg ${START} -y -vsync 0 ${THREADSCMD} -i '"$1"' ${LENGTH} -map ${VIDEO} -map ${AUDIO} -c:v libx${VFORMAT} -b:v ${BITRATE}k ${FPSCMD} -x${VFORMAT}-params "pass=1${PARAMS}" ${VIDEOFILTERS} -max_muxing_queue_size 9999 -an -f matroska /dev/null
		}
		echo "Processing pass 1 of VBR video, remaining time is remaining time for pass 1 only."
		echo "Process will sit on 100% while ffmpeg closes out functions."
		convertFile "$1" "$2" Pass1
		trans() {
			echo ffmpeg ${START} -vsync 0 ${THREADSCMD} -i "$1" ${LENGTH} -map ${VIDEO} -map ${AUDIO} ${SUB} -c:v libx${VFORMAT} -b:v ${BITRATE}k ${FPSCMD} -x${VFORMAT}-params "pass=2${PARAMS}" ${VIDEOFILTERS} -max_muxing_queue_size 9999 ${AUDIOCMD} "$2"
			eval ffmpeg ${START} -vsync 0 ${THREADSCMD} -i '"$1"' ${LENGTH} -map ${VIDEO} -map ${AUDIO} ${SUB} -c:v libx${VFORMAT} -b:v ${BITRATE}k ${FPSCMD} -x${VFORMAT}-params "pass=2${PARAMS}" ${VIDEOFILTERS} -max_muxing_queue_size 9999 ${AUDIOCMD} '"$2"'
		}
		echo ""
		echo "Processing pass 2 of VBR video, remaining time is total remaining time."
		echo "Process will sit on 100% while ffmpeg closes out functions."
		convertFile "$1" "$2" Pass2
	else
		if [ -n "${PARAMS}" ]; then
			PARAMS="-x${VFORMAT}-params '${PARAMS}'"
		fi
		trans() {
			echo ffmpeg ${START} -vsync 0 ${THREADSCMD} -i "$1" ${LENGTH} -map ${VIDEO} -map ${AUDIO} ${SUB} ${FPSCMD} -c:v libx${VFORMAT} -b:v ${BITRATE}k ${PARAMS} ${VIDEOFILTERS} -max_muxing_queue_size 9999 ${AUDIOCMD} "$2"
			eval ffmpeg ${START} -vsync 0 ${THREADSCMD} -i '"$1"' ${LENGTH} -map ${VIDEO} -map ${AUDIO} ${SUB} ${FPSCMD} -c:v libx${VFORMAT} -b:v ${BITRATE}k ${PARAMS} ${VIDEOFILTERS} -max_muxing_queue_size 9999 ${AUDIOCMD} '"$2"'
		}
		echo ""
		echo "Processing pass of CBR video, remaining time is total remaining time."
		echo "Process will sit on 100% while ffmpeg closes out functions."
		convertFile "$1" "$2" Pass1
	fi
else
	trans() {
		echo ffmpeg ${START} -vsync 0 ${THREADSCMD} -i "$1" ${LENGTH} -map ${VIDEO} -map ${AUDIO} ${SUB} -c:v copy -max_muxing_queue_size 9999 ${AUDIOCMD} "$2"
		eval ffmpeg ${START} -vsync 0 ${THREADSCMD} -i '"$1"' ${LENGTH} -map ${VIDEO} -map ${AUDIO} ${SUB} -c:v copy -max_muxing_queue_size 9999 ${AUDIOCMD} '"$2"'
	}
	echo "Processing a stream copy of video, remaining time is total remaining time."
	echo "Process will sit on 100% while ffmpeg closes out functions."
	convertFile "$1" "$2" Pass1
fi

exit
}
